/*
    This program will read PETSCII commands crom the SEQ file generated by the
    online PETSCII editor at http://petscii.krissz.hu. These files are
    basically a sequence of bytes, where each byte is a PETSCII character.

    In order to make use of these screens in a C64 program, we need to load
    the SEQ file into memory, and then print the characters to the screen.
    This is a fairly simple task, but is pretty slow, and not usable in the
    actual game. After a screen has been printed, we use the x64sc emulator
    to dump screen and colour memory to a binary file, which we can then
    load into the program as a blob. This is much faster, but requires a bit
    of extra work to get the screen into the program.
 */
.const LOADSEQ_SRCVECT = $fb
.macro LOADSEQ(start)
{
    lda #<start     // Store src address to src vector in zero-page
    sta LOADSEQ_SRCVECT
    lda #>start
    sta LOADSEQ_SRCVECT + 1
    read_loop:
        clc
        lda $d6    // load the cursor row
        cmp #$18
        bne read_data
        lda $d3     // load the cursor column
        cmp #$26
        beq end_loop// To avoid scrolling, don't print the last character
    read_data:
        lda ($fb),y // Load the character from the SEQ address
        jsr $ffd2   // Excute the CHROUT routine to print the character
        inc $fb     // increment the low byte of the address
        bne read_loop // if the low byte is not 0 (no overflow), branch to read_loop
        inc $fc // if there was overflow, increment the high byte of the address
        jmp read_loop // jump back to the start of the loop
    end_loop:

    lda #$00
    sta $d012
    wait:
        bit $d012
        bpl wait
}

.var screen = LoadBinary("intro.seq")
* = $4000 "Screen"; .fill screen.getSize(), screen.uget(i)
* = $c000 "Program"

BasicUpstart2(initialize)

initialize:

    lda #$06        // Set the background color for the game area
    sta $d021
    lda #$00        // Set the background color for the border
    sta $d020

    LOADSEQ($4000)

    loop:
    jmp loop
