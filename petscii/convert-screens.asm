/*
    This program will read PETSCII commands crom the SEQ file generated by the
    online PETSCII editor at http://petscii.krissz.hu. These files are
    basically a sequence of bytes, where each byte is a PETSCII character.

    In order to make use of these screens in a C64 program, we need to load
    the SEQ file into memory, and then print the characters to the screen.
    This is a fairly simple task, but is pretty slow, and not usable in the
    actual game. After a screen has been printed, we use the x64sc emulator
    to dump screen and colour memory to a binary file, which we can then
    load into the program as a blob. This is much faster, but requires a bit
    of extra work to get the screen into the program.
 */

.const SRC_PTR = $FB
.const END_PTR = $FD

.macro WAIT()
{
    // wait one full frame
    lda #$00
    sta $D012             // set raster-compare = 0

    vbl_wait1:
        bit $d012         // N = bit7 of current raster
        bpl vbl_wait1     // loop while N=0 (raster <128)

    vbl_wait2:
        bit $d012
        bmi vbl_wait2     // loop while N=1 (raster â‰¥128)
}

.macro LOADSEQ(start, len)
{        
    lda #<start
    sta SRC_PTR
    lda #>start
    sta SRC_PTR+1
    
    lda #<(start+len)
    sta END_PTR
    lda #>((start+len))
    sta END_PTR+1
    
    ldy #$00
    print_loop:
        lda (SRC_PTR),y
        jsr $FFD2
        inc SRC_PTR
        bne skip_hi
        inc SRC_PTR+1
    skip_hi:
        lda SRC_PTR
        cmp END_PTR
        bne print_loop
        lda SRC_PTR+1
        cmp END_PTR+1
        bne print_loop
  
}

#import "font.asm"
.var screen = LoadBinary("intro.seq")
* = $4000 "Screen"; .fill screen.getSize(), screen.uget(i)
* = $c000 "Program"

BasicUpstart2(initialize)

initialize:

    lda #%11000000          // Enable sprites
    sta $d015

    lda #itemaLogoSwoosh/64
    sta $07fe               // Sprite #6
    lda #itemaLogoBall/64
    sta $07ff               // Sprite #7

    // Set MSB for sprite 6 and 7
    lda $d010
    ora #%11000000
    sta $d010

    // Position both sprites overlapping
    lda #$02
    sta $d00c
    sta $d00e
    lda #$d7
    sta $d00d
    sta $d00f

    // Set colors for the sprites in the Itema logo
    lda #$0f
    sta $d02d
    lda #$0a
    sta $d02e

    lda #$00        // Set the background color for the game area
    sta $d021
    lda #$00        // Set the background color for the border
    sta $d020

    ldx #$00
    lda #$00
clear_screen_and_color:
    sta $0400,x
    sta $0500,x
    sta $0600,x
    sta $0700,x
    sta $d800,x
    sta $d900,x
    sta $da00,x
    sta $db00,x
    inx
    bne clear_screen_and_color

    LOADSEQ($4000,screen.getSize()-2)

    lda #$1e
    sta $d018

    WAIT()
    WAIT()

    loop:
    jmp loop
    
* = $2200 "itemaLogoSwoosh"
itemaLogoSwoosh:
.byte $00, $00, $00
.byte $01, $C1, $C0
.byte $07, $80, $70
.byte $0E, $00, $38
.byte $1C, $00, $1C
.byte $38, $7C, $0C
.byte $38, $7C, $0E
.byte $70, $1C, $0E
.byte $70, $1C, $0E
.byte $70, $1C, $0E
.byte $F0, $1C, $0E
.byte $F0, $1C, $0E
.byte $70, $1C, $1C
.byte $70, $1C, $3C
.byte $78, $1C, $78
.byte $78, $1F, $E0
.byte $3C, $1F, $C0
.byte $1E, $1E, $00
.byte $0F, $00, $00
.byte $07, $C2, $00
.byte $00, $FC, $00

* = $2240 "itemaLogoBall"
itemaLogoBall:
.byte $00, $1C, $00
.byte $00, $3E, $00
.byte $00, $3E, $00
.byte $00, $1C, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00
.byte $00, $00, $00

